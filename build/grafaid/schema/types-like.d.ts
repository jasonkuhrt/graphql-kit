import { type GraphQLNamedType } from 'graphql';
import * as Types from './type.js';
export type Any = Types.Enum | Types.InputObject | Types.Interface | Types.Object | Types.Scalar | Types.Union | Types.List<any> | Types.NonNull<any>;
export type Memberable = Types.Enum | Types.Union;
export declare const isMemberable: (value: unknown) => value is Memberable;
export type Field = Types.InputField | Types.OutputField;
export type Argable = Types.Directive | Types.OutputField;
export declare const isArgable: (value: unknown) => value is Argable;
export type Typeable = Types.Argument | Field;
export declare const isTypable: (value: unknown) => value is Typeable;
export declare const getTypeableNamedType: (value: Typeable) => Named;
export type Input = Types.Enum | Types.Scalar | Types.InputObject;
export declare const isInput: (value: unknown) => value is Input;
export type Output = Types.Enum | Types.Scalar | Types.Interface | Types.Union | Types.Object;
export declare const isOutput: (value: unknown) => value is Output;
export type Named = GraphQLNamedType;
export declare const isNamed: (type: unknown) => type is Named;
export type Fielded = FieldedInput | FieldedOutput;
export declare const isFielded: (type: unknown) => type is Fielded;
export type FieldedOutput = Types.Interface | Types.Object;
export declare const isFieldedOutput: (type: unknown) => type is FieldedOutput;
export type FieldedInput = Types.InputObject;
export declare const isFieldedInput: (type: unknown) => type is FieldedInput;
export type Directiveable = Types.Object | Types.Interface | Types.Union | Types.Scalar | Types.Enum | Types.InputObject | Types.OutputField | Types.InputField | Types.Argument;
export declare const isDirectiveable: (value: unknown) => value is Directiveable;
//# sourceMappingURL=types-like.d.ts.map